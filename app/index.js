// Generated by CoffeeScript 1.7.1
var LocalStrategy, Mincer, Notes, Users, app, assets, bodyParser, config, cookieParser, dbConfig, env, environment, express, mongoose, morgan, partials, passport, passportLocal, path, session;

express = require('express');

assets = require('connect-assets');

partials = require('express-partials');

session = require('express-session');

mongoose = require('mongoose');

cookieParser = require('cookie-parser');

bodyParser = require('body-parser');

path = require('path');

morgan = require('morgan');

Mincer = require('mincer');

passportLocal = require('passport-local-mongoose');

LocalStrategy = require('passport-local').Strategy;

passport = require('passport');


/*
Initialization
 */

app = express();

app.port = process.env.PORT || process.env.VMC_APP_PORT || 3000;

env = process.env.NODE_ENV || 'development';

config = require('./config');

config.setEnvironment(env);

dbConfig = '';

if (env === 'production') {
  mongoose.connect(dbConfig);
} else {
  mongoose.connect('mongodb://localhost/posthere');
}

app.use(morgan('dev'));

app.use(assets());

environment = new Mincer.Environment();

environment.appendPath('app/assets/javascripts');

environment.appendPath('app/assets/stylesheets');

app.use('/assets', Mincer.createServer(environment));

app.use(cookieParser());

app.use(session({
  secret: '2345876yt89gubvowtuye8obgsv7uo8fi',
  key: 'sid',
  cookie: {
    secure: true
  }
}));

app.set('view engine', 'jade');

app.use(partials());

app.use(bodyParser());

passport.use(new LocalStrategy(function(username, password, done) {
  return Users.findOne({
    username: username
  }, function(err, user) {
    if (err) {
      return done(err);
    }
    if (!user) {
      return done(null, false, {
        message: 'Incorrect username'
      });
    }
    return hash(passport, user.salt, function(err, hash) {
      if (err) {
        return done(err);
      }
      if (hash === user.hash) {
        return done(null, user);
      }
      return done(null, false, {
        message: 'Incorrect password'
      });
    });
  });
}));

passport.serializeUser(function(user, done) {
  return done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  return Users.findById(id, function(err, user) {
    if (err) {
      done(err);
    }
    return done(null, user);
  });
});

Notes = require('./models/note')(mongoose);

Users = require('./models/user')(mongoose, passportLocal);

require('./routes/api/v1/notes')(app, Notes);

require('./routes/api/v1/users')(app, Users);

app.all('/*', function(request, response) {
  return response.render('layout', {
    layout: false
  });
});

module.exports = app;
