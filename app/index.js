// Generated by CoffeeScript 1.7.1
var LocalStrategy, Mincer, Notes, Users, app, assets, bcrypt, bodyParser, config, cookieParser, env, environment, express, models, morgan, partials, passport, path, session;

express = require('express');

assets = require('connect-assets');

partials = require('express-partials');

session = require('express-session');

cookieParser = require('cookie-parser');

bodyParser = require('body-parser');

path = require('path');

morgan = require('morgan');

Mincer = require('mincer');

LocalStrategy = require('passport-local').Strategy;

passport = require('passport');

models = require('./models/index');

bcrypt = require('bcrypt');


/*
Initialization
 */

app = express();

app.port = process.env.PORT || process.env.VMC_APP_PORT || 3000;

env = process.env.NODE_ENV || 'development';

config = require('./config');

config.setEnvironment(env);

app.use(assets());

environment = new Mincer.Environment();

environment.appendPath('app/assets/javascripts');

environment.appendPath('app/assets/stylesheets');

app.use('/assets', Mincer.createServer(environment));

app.use(cookieParser());

app.use(bodyParser());

app.use(session({
  secret: '2345876yt89gubvowtuye8obgsv7uo8fi',
  key: 'sid',
  cookie: {
    secure: true
  }
}));

app.use(passport.initialize());

app.use(passport.session());

app.use(morgan('dev'));

app.set('view engine', 'jade');

app.use(partials());

Notes = require('./models/note')(models.sequelize, models.Sequelize);

Users = require('./models/user')(models.sequelize, models.Sequelize, bcrypt);

passport.serializeUser(function(user, done) {
  return done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  return Users.findById(id).then(function(err, user) {
    if (err) {
      done(err);
    }
    return done(null, user);
  });
});

passport.use(new LocalStrategy(function(username, password, done) {
  return Users.findOne({
    where: {
      username: username
    }
  }).then(function(user) {
    if (!user) {
      return done(null, false, {
        message: 'Incorrect username'
      });
    }
    return user.comparePassword(password, (function(_this) {
      return function(err, isMatch) {
        if (err) {
          return done(err);
        }
        if (isMatch) {
          return done(null, user);
        }
        return done(null, false, {
          message: 'Incorrect password'
        });
      };
    })(this));
  })["catch"](function(error) {
    return done(err);
  });
}));

require('./routes/api/v1/notes')(app, Notes);

require('./routes/api/v1/users')(app, Users, passport);

app.all('/*', function(request, response) {
  return response.render('layout', {
    layout: false
  });
});

module.exports = app;
