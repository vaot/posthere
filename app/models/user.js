// Generated by CoffeeScript 1.7.1
var SALT_WORK_FACTOR, bcrypt;

bcrypt = require('bcrypt');

SALT_WORK_FACTOR = 10;

module.exports = function(mongoose, passportLocal) {
  var User;
  User = new mongoose.Schema({
    email: {
      unique: true,
      required: 'Email is required',
      type: String
    },
    firstName: String,
    lastName: String,
    username: {
      unique: true,
      type: String,
      required: 'Username is required'
    },
    password: {
      type: String
    }
  });
  User.methods.comparePassword = function(userTypedPassword, callback) {
    return bcrypt.compare(userTypedPassword, this.password, (function(_this) {
      return function(err, isMatch) {
        if (err) {
          callback(err);
        }
        return callback(null, isMatch);
      };
    })(this));
  };
  User.pre('save', function(next) {
    if (!this.isModified('password')) {
      return next;
    }
    return bcrypt.genSalt(SALT_WORK_FACTOR, (function(_this) {
      return function(err, salt) {
        if (err) {
          return next(err);
        }
        return bcrypt.hash(_this.password, salt, function(err, hash) {
          if (err) {
            return next(err);
          }
          _this.password = hash;
          return next();
        });
      };
    })(this));
  });
  return mongoose.model('User', User);
};
